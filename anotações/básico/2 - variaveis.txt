                                Váriaveis
__________________________________________________________________________________
Regras gerais:

1 - Um nome de uma váriavel só pode começar com uma letra ou um sublinhado

2 - Um nome de uma váriavel não pode começar com um número

3 - Um nome de uma váriavel só pode conter caracteres de A-z, números de 0-9 e _

4 - Os nomes das váriaveis se diferenciam quando são colocadas maiúsculas e     minusculas

5 - Um nome de uma váriavel não podem ser uma palavra chave do Pythom

----------------------------------------------------------------------------------
Declarando váriaveis:

Para declarar uma váriavel, só coloque o nome dela apartir das regras acima e atribua um valor a ela. Ex:

x = 12
f = 1.0
y = "Olá, mundo!" (obs: """ """ para criar uma váriavel com várias linhas)
b = false

mas você também pode declarar elas com tipos primitivos para fazer uma syntax mais clara. ex:

x = int(12)
f = float(1.0)
y = str("olá, mundo!")

(obs: em váriaveis do tipo string você pode usar aspas simples também.)

----------------------------------------------------------------------------------
Váriações de declarações:

Caso você queira criar várias, váriaveis ao mesmo tempo, você pode usar a virgula para fazer uma separação. ex:

x, y, z = "x", "y", "z"

print(x, y, z)

----------------------------------------

E algo interessante é criar várias variaveis com o mesmo valor!ex:

x = y = z = "Hellooooo!!!"

print(x, y, z)

----------------------------------------

Ou você pode criar coleções:

Numbers = ["1", "5", "10"]
x, y, z = Numbers

print (x, y, z) 

----------------------------------------

Se você declara uma váriavel no começo de um script e depois fazer uma váriavel com o mesmo nome dentro de uma função tipo "def, "if" e "elif" então 
você estará declarando duas váriaveis diferentes. ex:

x = 1

if x > 0:
    x = 0
    print(f"1 é maior que {x}")
else:
    print("1 não é maior que {x}")



E por último , se você colocar uma váriavel dentro do escopo "global" então ela terá um valor universal dentro do python. Fora que você pode usar ela para mudar o valor de uma váriavel dentro de uma função. ex:

ex-1:

def myfunc():
    global x
    x = "fantastic"

myfunc()
print("Python is " + x)

----------------------------------------

ex-2:

x = "awesome"

def myfunc():
    global x
    
x = "fantastic"

myfunc()
print("Python is " + x)

----------------------------------------------------------------------------------
Format:

Podemos usar o comando format de algumas formas:

1 - Podemos colocar ele dentro de um print para ele formatar uma váriavel dentro de um texto.ex:

   1.2 - print(f"Finge que a próxima coisa que vai aparecer é uma váriavel {x}")
   1.3 - print("Fingiu? muito {} !".format(x))

2 - Podemos usar ele de forma que insiraa números , caracteres e váriaveis dentro de outras váriavel, mas não diretamente. ex:

    2.2 - idade = 20
          txt = "Meu nome é Félix , e tenho {} anos"
          print(txt.format(idade))

Oque ele fez ai foi pegar a váriavel "idade" e formatar dentro do colchetes a váriavel (obs: pode ser um valor qualquer) e colocou dentro da váriavel "txt".
Esse segundo tipo de format usa um tipo ilimitado de argumentos e é colocado na ordem colocada e separado por virgulas.ex

3 - vendas = "Eu quero {} dados de {} lados para {} mesa"
    print(vendas.format("2", "20", "1")
 
Você pode ordenar a ordem com que você quer que apareça com o {0}, mas só funciona com váriaveis.

----------------------------------------------------------------------------------
Escopos de váriaveis:

Quando criamos uma váriavel fora de algum tipo de função , essa váriavel é uma váriavel global, agora se temos uma váriavel quer é criada de de uma função, então essa váriavel é uma váriavel local. A gente pode atribuir váriaveis globais a variaveis locais, e assim podemos criar uma váriavel local que tenha o mesmo nome que uma váriavel global com o mesmo valor , sem alterar o valor inicial dessa váriavel global. 

Assim se criarmos um "def função(c)" e criarmos uma váriavel "a = 20" e declaramos "c" como "a" então "c" é igual a 20.ex:

def func(c):
    print(c)

a = 20
func(a)

Mas quando colocamos o comando global dessa função, então essa váriavel vira uma váriavel global como no ex-2.

__________________________________________________________________________________